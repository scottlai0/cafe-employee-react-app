/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CafesImport } from './routes/cafes'
import { Route as IndexImport } from './routes/index'
import { Route as EmployeesIndexImport } from './routes/employees/index'
import { Route as EmployeesCafeidImport } from './routes/employees/$cafe_id'

// Create/Update Routes

const CafesRoute = CafesImport.update({
  id: '/cafes',
  path: '/cafe-employee-react-app/cafes',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/cafe-employee-react-app/',
  getParentRoute: () => rootRoute,
} as any)

const EmployeesIndexRoute = EmployeesIndexImport.update({
  id: '/employees/',
  path: '/cafe-employee-react-app/employees/',
  getParentRoute: () => rootRoute,
} as any)

const EmployeesCafeidRoute = EmployeesCafeidImport.update({
  id: '/employees/$cafe_id',
  path: '/cafe-employee-react-app/employees/$cafe_id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/cafes': {
      id: '/cafes'
      path: '/cafes'
      fullPath: '/cafes'
      preLoaderRoute: typeof CafesImport
      parentRoute: typeof rootRoute
    }
    '/employees/$cafe_id': {
      id: '/employees/$cafe_id'
      path: '/employees/$cafe_id'
      fullPath: '/employees/$cafe_id'
      preLoaderRoute: typeof EmployeesCafeidImport
      parentRoute: typeof rootRoute
    }
    '/employees/': {
      id: '/employees/'
      path: '/employees'
      fullPath: '/employees'
      preLoaderRoute: typeof EmployeesIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cafes': typeof CafesRoute
  '/employees/$cafe_id': typeof EmployeesCafeidRoute
  '/employees': typeof EmployeesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cafes': typeof CafesRoute
  '/employees/$cafe_id': typeof EmployeesCafeidRoute
  '/employees': typeof EmployeesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/cafes': typeof CafesRoute
  '/employees/$cafe_id': typeof EmployeesCafeidRoute
  '/employees/': typeof EmployeesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/cafes' | '/employees/$cafe_id' | '/employees'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/cafes' | '/employees/$cafe_id' | '/employees'
  id: '__root__' | '/' | '/cafes' | '/employees/$cafe_id' | '/employees/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CafesRoute: typeof CafesRoute
  EmployeesCafeidRoute: typeof EmployeesCafeidRoute
  EmployeesIndexRoute: typeof EmployeesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CafesRoute: CafesRoute,
  EmployeesCafeidRoute: EmployeesCafeidRoute,
  EmployeesIndexRoute: EmployeesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/cafes",
        "/employees/$cafe_id",
        "/employees/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/cafes": {
      "filePath": "cafes.tsx"
    },
    "/employees/$cafe_id": {
      "filePath": "employees/$cafe_id.tsx"
    },
    "/employees/": {
      "filePath": "employees/index.js"
    }
  }
}
ROUTE_MANIFEST_END */
